// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ew4qcccnQBEWaCZGLSHX1A
// Component: QCDsLTGX9nYa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import ContentCard from "../../ContentCard"; // plasmic-import: DQ-iGMz_Q_A3/component
import Button from "../../Button"; // plasmic-import: 8giX1KtcjVQY/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_algosaur_mvp.module.css"; // plasmic-import: ew4qcccnQBEWaCZGLSHX1A/projectcss
import sty from "./PlasmicTrader.module.css"; // plasmic-import: QCDsLTGX9nYa/css

import ArrowLeftsvgIcon from "./icons/PlasmicIcon__ArrowLeftsvg"; // plasmic-import: kPKqYoEHNqTg/icon
import MoreActionsvgIcon from "./icons/PlasmicIcon__MoreActionsvg"; // plasmic-import: MnOKxswBKHML/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -130KpeBfD4P/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 24qZhALD5Ijc/icon
import Chart2SvgIcon from "./icons/PlasmicIcon__Chart2Svg"; // plasmic-import: cMq8UZJb80d2/icon
import HeartsvgIcon from "./icons/PlasmicIcon__Heartsvg"; // plasmic-import: 0aygCqYTkOUE/icon
import MessageSearchsvgIcon from "./icons/PlasmicIcon__MessageSearchsvg"; // plasmic-import: U16v4RSuvpKR/icon
import SendsvgIcon from "./icons/PlasmicIcon__Sendsvg"; // plasmic-import: i2HuPZe481FC/icon

createPlasmicElementProxy;

export type PlasmicTrader__VariantMembers = {};
export type PlasmicTrader__VariantsArgs = {};
type VariantPropType = keyof PlasmicTrader__VariantsArgs;
export const PlasmicTrader__VariantProps = new Array<VariantPropType>();

export type PlasmicTrader__ArgsType = {};
type ArgPropType = keyof PlasmicTrader__ArgsType;
export const PlasmicTrader__ArgProps = new Array<ArgPropType>();

export type PlasmicTrader__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  section?: Flex__<"section">;
  tabs?: Flex__<typeof AntdTabs>;
  contentCard?: Flex__<typeof ContentCard>;
  avatar?: Flex__<typeof PlasmicImg__>;
  name?: Flex__<"div">;
  coinTicker?: Flex__<"div">;
  signal?: Flex__<"div">;
  chart?: Flex__<"div">;
  love?: Flex__<"div">;
  comment?: Flex__<"div">;
  send?: Flex__<"div">;
};

export interface DefaultTraderProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTrader__RenderFunc(props: {
  variants: PlasmicTrader__VariantsArgs;
  args: PlasmicTrader__ArgsType;
  overrides: PlasmicTrader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "Vr4rooBQrNWbUq3yvzDoK",
        opId: "3398e568-68b1-4396-8cf1-c0fba8d822ee",
        userArgs: {
          filters: [$ctx.params.username]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.3398e568-68b1-4396-8cf1-c0fba8d822ee.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryContent: usePlasmicDataOp(() => {
      return {
        sourceId: "Vr4rooBQrNWbUq3yvzDoK",
        opId: "2cf1d412-afd7-4a1d-9811-bbdae9c4cb4b",
        userArgs: {
          filters: [$ctx.params.username]
        },
        cacheKey: `plasmic.$.2cf1d412-afd7-4a1d-9811-bbdae9c4cb4b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryToken: usePlasmicDataOp(() => {
      return {
        sourceId: "Vr4rooBQrNWbUq3yvzDoK",
        opId: "98cd4e2a-c9be-4fd0-98ac-9e1b77ee7786",
        userArgs: {},
        cacheKey: `plasmic.$.98cd4e2a-c9be-4fd0-98ac-9e1b77ee7786.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uHu7H)}>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__m2K0H
                )}
                component={Link}
                href={`/`}
                platform={"nextjs"}
              >
                <ArrowLeftsvgIcon
                  className={classNames(projectcss.all, sty.svg__piTrF)}
                  role={"img"}
                />
              </PlasmicLink__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nZe8I)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__jJWw8
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <MoreActionsvgIcon
                    className={classNames(projectcss.all, sty.svg__klYc)}
                    role={"img"}
                  />
                </PlasmicLink__>
              </Stack__>
            </div>
          </div>
          <LoadingBoundary
            data-plasmic-name={"loadingBoundary"}
            data-plasmic-override={overrides.loadingBoundary}
            className={classNames("__wab_instance", sty.loadingBoundary)}
            loadingState={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Wf5L
                    )}
                  >
                    {"Loading..."}
                  </div>
                )}
              </DataCtxReader__>
            }
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xodTm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__boblw)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5___1Cl4V
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0].fullname;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h5>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__w1R1M
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.query.data[0].username;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__pvN5)}
                      displayHeight={"52px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"52px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $queries.query.data[0].avatar;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wPpJn)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__eZ1F2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kakI
                        )}
                      >
                        {"0"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u59Tb
                        )}
                      >
                        {"Followers"}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1LjDo
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uMx9F
                        )}
                      >
                        {"0"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qJQh4
                        )}
                      >
                        {"Followers"}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__w0OhN)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o7Q6E
                        )}
                      >
                        {"0"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yp7CN
                        )}
                      >
                        {"Followers"}
                      </div>
                    </Stack__>
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__fkTrd
                      )}
                    >
                      {"Follow"}
                    </button>
                  </div>
                  <AntdTabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    activeKey={generateStateValueProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    animateTabBar={true}
                    animateTabContent={false}
                    animated={true}
                    className={classNames("__wab_instance", sty.tabs)}
                    defaultActiveKey={"1"}
                    items={
                      <React.Fragment>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__b7RL
                          )}
                          key={"1"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__erY3
                              )}
                            >
                              {"Posts"}
                            </div>
                          }
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.queryContent.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <ContentCard
                                data-plasmic-name={"contentCard"}
                                data-plasmic-override={overrides.contentCard}
                                cardImage2={
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img___4Bs44)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"100%"}
                                    loading={"lazy"}
                                    src={(() => {
                                      try {
                                        return currentItem.image;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                }
                                cardTitle2={
                                  <React.Fragment>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__wbxaS
                                      )}
                                    >
                                      <PlasmicImg__
                                        data-plasmic-name={"avatar"}
                                        data-plasmic-override={overrides.avatar}
                                        alt={""}
                                        className={classNames(sty.avatar)}
                                        displayHeight={"42px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"42px"}
                                        loading={"lazy"}
                                        src={(() => {
                                          try {
                                            return $queries.query.data[0]
                                              .avatar;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />

                                      <div
                                        data-plasmic-name={"name"}
                                        data-plasmic-override={overrides.name}
                                        className={classNames(
                                          projectcss.all,
                                          sty.name
                                        )}
                                      >
                                        <h6
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h6,
                                            projectcss.__wab_text,
                                            sty.h6__cj8S
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $queries.queryContent
                                                  .data[0].username;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Trader Name";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h6>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___6Ywkr
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  const currentDate =
                                                    new Date();
                                                  const createdAt = new Date(
                                                    currentItem.created_at
                                                  );
                                                  const timeDiffMs =
                                                    currentDate.getTime() -
                                                    createdAt.getTime();
                                                  const minutesDiff =
                                                    Math.floor(
                                                      timeDiffMs / (1000 * 60)
                                                    );
                                                  const hoursDiff = Math.floor(
                                                    timeDiffMs /
                                                      (1000 * 60 * 60)
                                                  );
                                                  const daysDiff = Math.floor(
                                                    timeDiffMs /
                                                      (1000 * 60 * 60 * 24)
                                                  );

                                                  if (minutesDiff < 60) {
                                                    return `${minutesDiff} minutes ago`;
                                                  } else if (hoursDiff < 24) {
                                                    return `${hoursDiff} hours ago`;
                                                  } else {
                                                    return `${daysDiff} days ago`;
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Trader Name";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </Stack__>
                                    <button
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.button,
                                        projectcss.__wab_text,
                                        sty.button___28QBs
                                      )}
                                    >
                                      {"Follow"}
                                    </button>
                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        sty.link__cs063
                                      )}
                                      component={Link}
                                      platform={"nextjs"}
                                    >
                                      <MoreActionsvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__vJDrr
                                        )}
                                        role={"img"}
                                      />
                                    </PlasmicLink__>
                                  </React.Fragment>
                                }
                                cardToolbar2={
                                  <React.Fragment>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"chart"}
                                      data-plasmic-override={overrides.chart}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.chart
                                      )}
                                    >
                                      <Chart2SvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__q4Pta
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__x29Ny
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem
                                                .interactionAgregate.view;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "12.3K";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"love"}
                                      data-plasmic-override={overrides.love}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.love
                                      )}
                                    >
                                      <HeartsvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___3AKm3
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__oiOax
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem
                                                .interactionAgregate.likes;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "12.3K";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"comment"}
                                      data-plasmic-override={overrides.comment}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.comment
                                      )}
                                    >
                                      <MessageSearchsvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__dETle
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__fOz1O
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem
                                                .interactionAgregate.comments;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "12.3K";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"send"}
                                      data-plasmic-override={overrides.send}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.send
                                      )}
                                    >
                                      <SendsvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___6Xmvh
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__uMkwq
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem
                                                .interactionAgregate.share;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "12.3K";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                  </React.Fragment>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.contentCard
                                )}
                                imageOn={(() => {
                                  try {
                                    return currentItem.image != null;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                key={currentIndex}
                                signalContainer2={
                                  <React.Fragment>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"coinTicker"}
                                      data-plasmic-override={
                                        overrides.coinTicker
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.coinTicker
                                      )}
                                    >
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img___0KJlM)}
                                        displayHeight={"32px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"32px"}
                                        loading={"lazy"}
                                        src={{
                                          src: "/plasmic/algosaur_mvp/images/image.png",
                                          fullWidth: 64,
                                          fullHeight: 64,
                                          aspectRatio: undefined
                                        }}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___2YbZa
                                        )}
                                      >
                                        <h5
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h5,
                                            projectcss.__wab_text,
                                            sty.h5__z9Yyd
                                          )}
                                        >
                                          {"BTC"}
                                        </h5>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__mImCn
                                          )}
                                        >
                                          {"Bitcoin/usdt"}
                                        </div>
                                      </div>
                                    </Stack__>
                                    <div
                                      data-plasmic-name={"signal"}
                                      data-plasmic-override={overrides.signal}
                                      className={classNames(
                                        projectcss.all,
                                        sty.signal
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__gb6YP
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__tiESb
                                          )}
                                        >
                                          {"Current Price"}
                                        </div>
                                        <h6
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h6,
                                            projectcss.__wab_text,
                                            sty.h6__lyhn
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.signal
                                                  .currentPrice;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Current Price";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h6>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__jtWdh
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cnIf7
                                          )}
                                        >
                                          {"Target Price"}
                                        </div>
                                        <h6
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h6,
                                            projectcss.__wab_text,
                                            sty.h6__axqWj
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.signal
                                                  .targetPrice;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Current Price";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h6>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__yY9HP
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__wsFdN
                                          )}
                                        >
                                          {"Stop Loss"}
                                        </div>
                                        <h6
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h6,
                                            projectcss.__wab_text,
                                            sty.h6__lq81D
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.signal
                                                  .stopLoss;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Current Price";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h6>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ce0K3
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__jx2Si
                                          )}
                                        >
                                          {"TP 1"}
                                        </div>
                                        <h6
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h6,
                                            projectcss.__wab_text,
                                            sty.h6__fbRGg
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.signal.TP1;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Current Price";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h6>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__rK1H1
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__qNndB
                                          )}
                                        >
                                          {"TP 2"}
                                        </div>
                                        <h6
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h6,
                                            projectcss.__wab_text,
                                            sty.h6__tbxOd
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.signal.TP2;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Current Price";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h6>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__djX3U
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__l8QlI
                                          )}
                                        >
                                          {"TP 3"}
                                        </div>
                                        <h6
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h6,
                                            projectcss.__wab_text,
                                            sty.h6__mwP2S
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.signal.TP3;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Current Price";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h6>
                                      </div>
                                    </div>
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__mdAfv
                                      )}
                                      color={"green"}
                                    >
                                      {"Execute Trade"}
                                    </Button>
                                  </React.Fragment>
                                }
                                signalOn={(() => {
                                  try {
                                    return currentItem.signal != null;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                textContent2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4JGY
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.caption;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Wellcome to algosaur, we are the first social trade in indonesia for crypto market trading";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                }
                              />
                            );
                          })}
                        </AntdTabItem>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__sFs6Y
                          )}
                          key={"2"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__v5Chr
                              )}
                            >
                              {"Portfolio"}
                            </div>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uhz0C
                            )}
                          >
                            {"Comming Soon"}
                          </div>
                        </AntdTabItem>
                      </React.Fragment>
                    }
                    onChange={generateStateOnChangeProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    size={"small"}
                    sticky={false}
                    tabBarBackground={"#FFF"}
                    tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                    tabsScopeClassName={sty["tabs__tabs"]}
                    type={"card"}
                  />
                </section>
              )}
            </DataCtxReader__>
          </LoadingBoundary>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "loadingBoundary",
    "section",
    "tabs",
    "contentCard",
    "avatar",
    "name",
    "coinTicker",
    "signal",
    "chart",
    "love",
    "comment",
    "send"
  ],
  header: ["header"],
  loadingBoundary: [
    "loadingBoundary",
    "section",
    "tabs",
    "contentCard",
    "avatar",
    "name",
    "coinTicker",
    "signal",
    "chart",
    "love",
    "comment",
    "send"
  ],
  section: [
    "section",
    "tabs",
    "contentCard",
    "avatar",
    "name",
    "coinTicker",
    "signal",
    "chart",
    "love",
    "comment",
    "send"
  ],
  tabs: [
    "tabs",
    "contentCard",
    "avatar",
    "name",
    "coinTicker",
    "signal",
    "chart",
    "love",
    "comment",
    "send"
  ],
  contentCard: [
    "contentCard",
    "avatar",
    "name",
    "coinTicker",
    "signal",
    "chart",
    "love",
    "comment",
    "send"
  ],
  avatar: ["avatar"],
  name: ["name"],
  coinTicker: ["coinTicker"],
  signal: ["signal"],
  chart: ["chart"],
  love: ["love"],
  comment: ["comment"],
  send: ["send"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  loadingBoundary: typeof LoadingBoundary;
  section: "section";
  tabs: typeof AntdTabs;
  contentCard: typeof ContentCard;
  avatar: typeof PlasmicImg__;
  name: "div";
  coinTicker: "div";
  signal: "div";
  chart: "div";
  love: "div";
  comment: "div";
  send: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTrader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTrader__VariantsArgs;
    args?: PlasmicTrader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTrader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTrader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTrader__ArgProps,
          internalVariantPropNames: PlasmicTrader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTrader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTrader";
  } else {
    func.displayName = `PlasmicTrader.${nodeName}`;
  }
  return func;
}

export const PlasmicTrader = Object.assign(
  // Top-level PlasmicTrader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    section: makeNodeComponent("section"),
    tabs: makeNodeComponent("tabs"),
    contentCard: makeNodeComponent("contentCard"),
    avatar: makeNodeComponent("avatar"),
    _name: makeNodeComponent("name"),
    coinTicker: makeNodeComponent("coinTicker"),
    signal: makeNodeComponent("signal"),
    chart: makeNodeComponent("chart"),
    love: makeNodeComponent("love"),
    comment: makeNodeComponent("comment"),
    send: makeNodeComponent("send"),

    // Metadata about props expected for PlasmicTrader
    internalVariantProps: PlasmicTrader__VariantProps,
    internalArgProps: PlasmicTrader__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTrader;
/* prettier-ignore-end */
