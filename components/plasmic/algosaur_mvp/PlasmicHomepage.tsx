// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ew4qcccnQBEWaCZGLSHX1A
// Component: ATNgwGv0GHWJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import ContentCard from "../../ContentCard"; // plasmic-import: DQ-iGMz_Q_A3/component
import Button from "../../Button"; // plasmic-import: 8giX1KtcjVQY/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_algosaur_mvp.module.css"; // plasmic-import: ew4qcccnQBEWaCZGLSHX1A/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: ATNgwGv0GHWJ/css

import LogoAlgosaursvgIcon from "./icons/PlasmicIcon__LogoAlgosaursvg"; // plasmic-import: C-1toCdy1dnc/icon
import NotificationsvgIcon from "./icons/PlasmicIcon__Notificationsvg"; // plasmic-import: rPti6wjldvWn/icon
import MoreActionsvgIcon from "./icons/PlasmicIcon__MoreActionsvg"; // plasmic-import: MnOKxswBKHML/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -130KpeBfD4P/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 24qZhALD5Ijc/icon
import Chart2SvgIcon from "./icons/PlasmicIcon__Chart2Svg"; // plasmic-import: cMq8UZJb80d2/icon
import HeartsvgIcon from "./icons/PlasmicIcon__Heartsvg"; // plasmic-import: 0aygCqYTkOUE/icon
import MessageSearchsvgIcon from "./icons/PlasmicIcon__MessageSearchsvg"; // plasmic-import: U16v4RSuvpKR/icon
import SendsvgIcon from "./icons/PlasmicIcon__Sendsvg"; // plasmic-import: i2HuPZe481FC/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  content?: Flex__<"section">;
  contentCard?: Flex__<typeof ContentCard>;
  avatar?: Flex__<typeof PlasmicImg__>;
  name?: Flex__<"a"> & Partial<LinkProps>;
  coinTicker?: Flex__<"div">;
  h5?: Flex__<"h5">;
  signal?: Flex__<"div">;
  chart?: Flex__<"div">;
  love?: Flex__<"div">;
  comment?: Flex__<"div">;
  send?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryContentPost: usePlasmicDataOp(() => {
      return {
        sourceId: "Vr4rooBQrNWbUq3yvzDoK",
        opId: "97dfff36-80fb-4c61-8a7d-4ab52149a38d",
        userArgs: {},
        cacheKey: `plasmic.$.97dfff36-80fb-4c61-8a7d-4ab52149a38d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryTrader: usePlasmicDataOp(() => {
      return {
        sourceId: "Vr4rooBQrNWbUq3yvzDoK",
        opId: "a27d99ba-99c3-44bb-af3f-24b3fe2b4866",
        userArgs: {},
        cacheKey: `plasmic.$.a27d99ba-99c3-44bb-af3f-24b3fe2b4866.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryToken: usePlasmicDataOp(() => {
      return {
        sourceId: "Vr4rooBQrNWbUq3yvzDoK",
        opId: "98cd4e2a-c9be-4fd0-98ac-9e1b77ee7786",
        userArgs: {},
        cacheKey: `plasmic.$.98cd4e2a-c9be-4fd0-98ac-9e1b77ee7786.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zaaif)}>
              <LogoAlgosaursvgIcon
                className={classNames(projectcss.all, sty.svg___9BufE)}
                role={"img"}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gbelp)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___5DUi2
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <NotificationsvgIcon
                    className={classNames(projectcss.all, sty.svg__e8Kgf)}
                    role={"img"}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__iJyVp
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ehuFv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/algosaur_mvp/images/placeholdAvapng.png",
                      fullWidth: 42,
                      fullHeight: 42,
                      aspectRatio: undefined
                    }}
                  />
                </PlasmicLink__>
              </Stack__>
            </div>
          </div>
          <section
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames(projectcss.all, sty.content)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.queryContentPost.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <ContentCard
                  data-plasmic-name={"contentCard"}
                  data-plasmic-override={overrides.contentCard}
                  cardImage2={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__yYwRy)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.image;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  }
                  cardTitle2={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__osCuf
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"avatar"}
                          data-plasmic-override={overrides.avatar}
                          alt={""}
                          className={classNames(sty.avatar)}
                          displayHeight={"42px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"42px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return $queries.queryTrader.data.find(
                                trader =>
                                  trader.username === currentItem.username
                              ).avatar;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <PlasmicLink__
                          data-plasmic-name={"name"}
                          data-plasmic-override={overrides.name}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.name
                          )}
                          component={Link}
                          href={`/${(() => {
                            try {
                              return currentItem.username;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}`}
                          platform={"nextjs"}
                        >
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__olIWe
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.username;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Trader Name";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h6>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yiCls
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const currentDate = new Date();
                                    const createdAt = new Date(
                                      currentItem.created_at
                                    );
                                    const timeDiffMs =
                                      currentDate.getTime() -
                                      createdAt.getTime();
                                    const minutesDiff = Math.floor(
                                      timeDiffMs / (1000 * 60)
                                    );
                                    const hoursDiff = Math.floor(
                                      timeDiffMs / (1000 * 60 * 60)
                                    );
                                    const daysDiff = Math.floor(
                                      timeDiffMs / (1000 * 60 * 60 * 24)
                                    );

                                    if (minutesDiff < 60) {
                                      return `${minutesDiff} minutes ago`;
                                    } else if (hoursDiff < 24) {
                                      return `${hoursDiff} hours ago`;
                                    } else {
                                      return `${daysDiff} days ago`;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Trader Name";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </PlasmicLink__>
                      </Stack__>
                      <button
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button__xwK06
                        )}
                      >
                        {"Follow"}
                      </button>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__ot6Lf
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        <MoreActionsvgIcon
                          className={classNames(projectcss.all, sty.svg__mpVK)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                    </React.Fragment>
                  }
                  cardToolbar2={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"chart"}
                        data-plasmic-override={overrides.chart}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.chart)}
                      >
                        <Chart2SvgIcon
                          className={classNames(projectcss.all, sty.svg__uVzMo)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vJyHx
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.interactionAgregate.view;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "12.3K";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"love"}
                        data-plasmic-override={overrides.love}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.love)}
                      >
                        <HeartsvgIcon
                          className={classNames(projectcss.all, sty.svg__gwAH)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cCw3Y
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.interactionAgregate.likes;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "12.3K";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"comment"}
                        data-plasmic-override={overrides.comment}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.comment)}
                      >
                        <MessageSearchsvgIcon
                          className={classNames(projectcss.all, sty.svg__zYArt)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nhTMk
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.interactionAgregate.share;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "12.3K";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"send"}
                        data-plasmic-override={overrides.send}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.send)}
                      >
                        <SendsvgIcon
                          className={classNames(projectcss.all, sty.svg__qTlo)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__loh63
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.interactionAgregate.comments;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "12.3K";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.contentCard)}
                  imageOn={(() => {
                    try {
                      return currentItem.image != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "imageOn";
                      }
                      throw e;
                    }
                  })()}
                  key={currentIndex}
                  signalContainer2={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"coinTicker"}
                        data-plasmic-override={overrides.coinTicker}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.coinTicker)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__fhYRc)}
                          displayHeight={"32px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"32px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return $queries.queryToken.data.find(
                                token =>
                                  token.symbol === currentItem.signal.Symbol
                              ).logo;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/algosaur_mvp/images/image.png",
                                  fullWidth: 64,
                                  fullHeight: 64,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__f2LjL
                          )}
                        >
                          <h5
                            data-plasmic-name={"h5"}
                            data-plasmic-override={overrides.h5}
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.signal.Symbol;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "BTC";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h5>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iS43J
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $queries.queryToken.data.find(
                                    token =>
                                      token.symbol === currentItem.signal.Symbol
                                  ).name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Bitcoin/usdt";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </Stack__>
                      <div
                        data-plasmic-name={"signal"}
                        data-plasmic-override={overrides.signal}
                        className={classNames(projectcss.all, sty.signal)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ihUyw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rgUsz
                            )}
                          >
                            {"Current Price"}
                          </div>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__ekjY
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.signal.currentPrice;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Current Price";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h6>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xamJn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__diH
                            )}
                          >
                            {"Target Price"}
                          </div>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__k4Ypf
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.signal.targetPrice;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Current Price";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h6>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5SDy7
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bIPg
                            )}
                          >
                            {"Stop Loss"}
                          </div>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__ix38I
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.signal.stopLoss;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Current Price";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h6>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__o30PW
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bb9E2
                            )}
                          >
                            {"TP 1"}
                          </div>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__j0MjC
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.signal.TP1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Current Price";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h6>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1JizF
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lwXq7
                            )}
                          >
                            {"TP 2"}
                          </div>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__fjZ72
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.signal.TP2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Current Price";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h6>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rgSIu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xhUq
                            )}
                          >
                            {"TP 3"}
                          </div>
                          <h6
                            className={classNames(
                              projectcss.all,
                              projectcss.h6,
                              projectcss.__wab_text,
                              sty.h6__h9Ys
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.signal.TP3;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Current Price";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h6>
                        </div>
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ePvS6
                        )}
                        color={"green"}
                      >
                        {"Execute Trade"}
                      </Button>
                    </React.Fragment>
                  }
                  signalOn={(() => {
                    try {
                      return currentItem.signal != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "signalOn";
                      }
                      throw e;
                    }
                  })()}
                  textContent2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__d4GG
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.caption;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Wellcome to algosaur, we are the first social trade in indonesia for crypto market trading";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                />
              );
            })}
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "content",
    "contentCard",
    "avatar",
    "name",
    "coinTicker",
    "h5",
    "signal",
    "chart",
    "love",
    "comment",
    "send"
  ],
  header: ["header"],
  content: [
    "content",
    "contentCard",
    "avatar",
    "name",
    "coinTicker",
    "h5",
    "signal",
    "chart",
    "love",
    "comment",
    "send"
  ],
  contentCard: [
    "contentCard",
    "avatar",
    "name",
    "coinTicker",
    "h5",
    "signal",
    "chart",
    "love",
    "comment",
    "send"
  ],
  avatar: ["avatar"],
  name: ["name"],
  coinTicker: ["coinTicker", "h5"],
  h5: ["h5"],
  signal: ["signal"],
  chart: ["chart"],
  love: ["love"],
  comment: ["comment"],
  send: ["send"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  content: "section";
  contentCard: typeof ContentCard;
  avatar: typeof PlasmicImg__;
  name: "a";
  coinTicker: "div";
  h5: "h5";
  signal: "div";
  chart: "div";
  love: "div";
  comment: "div";
  send: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    content: makeNodeComponent("content"),
    contentCard: makeNodeComponent("contentCard"),
    avatar: makeNodeComponent("avatar"),
    _name: makeNodeComponent("name"),
    coinTicker: makeNodeComponent("coinTicker"),
    h5: makeNodeComponent("h5"),
    signal: makeNodeComponent("signal"),
    chart: makeNodeComponent("chart"),
    love: makeNodeComponent("love"),
    comment: makeNodeComponent("comment"),
    send: makeNodeComponent("send"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
